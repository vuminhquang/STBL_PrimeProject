@using System.Reflection
@using Microsoft.Extensions.DependencyInjection
@using SharedClassy
@inject IServiceProvider Services

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true"
        AdditionalAssemblies="@_lazyLoadedAssemblies"
        OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private List<Assembly> _lazyLoadedAssemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        //Load all UI addins
        try
        {
            if (args.Path.ToLower().Contains("addins/"))
            {
                var servicesAssemblies = Services.GetServices<IDiscoverableUI>().Select(s => s.GetType().Assembly);
                _lazyLoadedAssemblies.AddRange(servicesAssemblies);
            }
        }
        catch (Exception ex)
        {

        }
    }

}